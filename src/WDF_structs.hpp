#include "xsimd/xsimd.hpp"
#include "chowdsp_wdf/chowdsp_wdf.h"
using namespace chowdsp::wdft;

class EnvelopeGenerator
{
public:
    EnvelopeGenerator() = default;

    void prepare (double sampleRate)
    {
        C52.prepare ((float) sampleRate);
        C51.prepare ((float) sampleRate);
    }

    void reset()
    {
        C52.reset();
        C51.reset();
    }

    float C52_nrange = 99.9e-9;
    float C52_prange = 600.0e-9;
    float R185_nrange = 34.99e3;
    float R185_prange = 100.0e3;
    void setRackParameters(float capMod, float resMod) {
        capMod *= -1.f;
        resMod *= -1.f;
        if (capMod < 0) 
            C52.setCapacitanceValue(C52_value + (capMod)*(capMod) * C52_nrange * -1.f);
        if (capMod >= 0) 
            C52.setCapacitanceValue(C52_value + (capMod)*(capMod) * C52_prange);
        if (resMod < 0) 
            R185.setResistanceValue(R185_value + (resMod)*(resMod) * R185_nrange * -1.f);
        if (resMod >= 0) 
            R185.setResistanceValue(R185_value + (resMod)*(resMod) * R185_prange);
    }

    void setCircuitElements (float c51, float c52)
    {   
        C51.setCapacitanceValue(c51);
        C52.setCapacitanceValue(c52);
    }

    inline float processSample (float x)
    {
        I1.setCurrent(x);

        I1.incident (P1.reflected());
        P1.incident (I1.reflected());

        return voltage<float> (R185);
    }
    float C52_value = 100e-9f;
    float R185_value = 35000.0f;
    CapacitorT<float> C52 { C52_value }; // C52: slight adjustment 
    CapacitorT<float> C51 { 470e-9f }; // C51: value from schematics
    ResistorT<float> R185 { R185_value };  // selected manually by fitting curves, should be 15k equal to R184
    ResistorT<float> R184 { 15000.0f }; // R184: value from schematics


    WDFParallelT<float, decltype(R185), decltype(C52)> P2 {R185, C52};
    WDFSeriesT<float, decltype(R184), decltype(P2)> S1 {R184, P2};
    WDFParallelT<float, decltype(C51), decltype(S1)> P1 {C51, S1};
    IdealCurrentSourceT<float, decltype (P1)> I1 { P1 };
}; // EnvelopeGenerator

template <typename FloatType>
class DiodeClipper
{
public:
    DiodeClipper() = default;

    void prepare (double sampleRate)
    {
        C1.prepare ((float) sampleRate);
    }

    void reset()
    {
        C1.reset();
    }

    inline FloatType processSample (FloatType x)
    {
        Vs.setVoltage (x);

        dp.incident (P1.reflected());
        auto y = voltage<FloatType> (C1);
        P1.incident (dp.reflected());

        return y;
    }

private:
    ResistorT<FloatType> R1 { 411.5f };
    ResistiveVoltageSourceT<FloatType> Vs;
    WDFSeriesT<FloatType, decltype (Vs), decltype (R1)> S1 { Vs, R1 };

    CapacitorT<FloatType> C1 { 47.0e-9f };
    WDFParallelT<FloatType, decltype (S1), decltype (C1)> P1 { S1, C1 };

    // GZ34 diode pair
    DiodePairT<FloatType, decltype (P1)> dp { P1, 2.52e-9f };
};

/**
 * Resonators from TR-808 snare drum circuit.
 * Reference: http://www.ericarcher.net/wp-content/uploads/2014/07/tr808_snare_diy_project.pdf
 * Based on the snare resonator from https://github.com/jatinchowdhury18/WaveDigitalFilters
 * Adjusted with values found here: https://norgatronics.blogspot.com/2021/11/sd-8081-tuning.html
 * ♡(㋭ ਊ ㋲)♡ -> Infinite and endless love & thanks to Steve Norgate and Jatin Chowdhury!
 */
class SnareResonatorLow
{
public:
    SnareResonatorLow() = default;

    float vinDivider = 1.0;

    void prepare (double sampleRate)
    {
        C58.prepare ((float) sampleRate);
        C59.prepare ((float) sampleRate);
        C57.prepare ((float) sampleRate);
    }

    void reset()
    {
        C58.reset();
        C59.reset();
        C57.reset();
    }

    float C58_range = 35.0e-9;
    void setRackParameters(float freqMod) {
        C58.setCapacitanceValue(C58_value + (freqMod * -1.0) * C58_range);
    }

    void setParameters (float freqHz, float Rmult01)
    {
        constexpr auto Rfb = 1.0e6f;
        const auto Rg = 250.0f * std::pow (2500.0f / 250.0f, Rmult01);
        float C = 1.0f / (2 * M_PI * freqHz * std::sqrt (Rfb * Rg));

        setParameters (Rfb, Rg, C);
    }

    void setParameters (float Rfb, float Rg, float Cval)
    {
        R197.setResistanceValue (Rfb);
        R196.setResistanceValue (Rg);
        C58.setCapacitanceValue (Cval);
        C59.setCapacitanceValue (Cval);
    }

    inline float processSample (float x)
    {   
        x *= vinDivider;
        Vin.setVoltage (x);

        Vin.incident (S1.reflected());
        S1.incident (Vin.reflected());

        return voltage<float> (R196) + voltage<float> (C59);
    }

    float C58_value = 0.04131e-6f;
private:
    // Port B
    ResistorT<float> R197 { 820.0e3f };

    // Port C
    CapacitorT<float> C58 { C58_value }; // Revised value, Original value is 27n, cheated to match the freq exactly 

    // Port D
    CapacitorT<float> C59 { 0.027e-6f };

    // Port E
    ResistorT<float> R196 { 680.0f };

    struct ImpedanceCalc
    {
        template <typename RType>
        static float calcImpedance (RType& R)
        {
            constexpr float Ag = 100000.0f; // op-amp gain
            constexpr float Ri = 500.0e6f; // op-amp input impedance
            constexpr float Ro = 1.0e-1f; // op-amp output impedance
            const auto [Rb, Rc, Rd, Re] = R.getPortImpedances();

            // This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
            // invoked with command: r_solver.py --adapt 0 --out scratch/snare_res_scatt.txt scratch/snare_res2.txt
            R.setSMatrixData ({ { 0, -(Rc * Rd + (Rc + Rd) * Re - Rc * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro), (Rb * Rd + Rb * Re - (Rb + Rd) * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro), (Rb * Re + Rc * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro), (Rb * Rd - (Rb + Rc + Rd) * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro) },
                                { (Ag * Rb * Rd * Ri - Rb * Rc * Rd + Rb * Rc * Ro - (Rb * Rc + Rb * Rd) * Re) / (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro), -(Rb * Rb * Rc * Rd * Rd + (Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (Rb * Rb * Rc - Rc * Rc * Rd - Rc * Rd * Rd + (Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Re + (Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Ri) * Ro * Ro + (2 * Rb * Rb * Rc * Rd + Rb * Rb * Rd * Rd) * Re - (((Ag + 1) * Rc * Rc - Rb * Rb) * Rd * Rd - ((Ag + 1) * Rb * Rb - (Ag + 1) * Rc * Rc - 2 * (Ag + 1) * Rc * Rd - (Ag + 1) * Rd * Rd) * Re * Re + (2 * (Ag + 1) * Rc * Rd * Rd - ((Ag + 2) * Rb * Rb - 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - (2 * Rb * Rb * Rc * Rd - Rc * Rc * Rd * Rd + (Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc - Rc * Rd * Rd + (Rb * Rb - Rc * Rc) * Rd) * Re - ((Ag + 2) * Rc * Rd * Rd + ((Ag + 2) * Rc * Rc - 2 * Rb * Rb) * Rd - ((Ag + 2) * Rb * Rb - (Ag + 2) * Rc * Rc - 2 * (Ag + 2) * Rc * Rd - (Ag + 2) * Rd * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -(Rb * Rb * Rc * Rd * Rd + (Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Ri) * Ro * Ro + (2 * Rb * Rb * Rc * Rd + Rb * Rb * Rd * Rd) * Re + (((Ag + 2) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rb * Rb + (Ag + 1) * Rb * Rc + (Ag + 1) * Rb * Rd) * Re * Re + (2 * (Ag + 1) * Rb * Rd * Rd + ((3 * Ag + 4) * Rb * Rb + 4 * (Ag + 1) * Rb * Rc) * Rd) * Re) * Ri - (2 * Rb * Rb * Rc * Rd + Rb * Rc * Rd * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + (2 * Rb * Rb * Rc + Rb * Rd * Rd + 3 * (Rb * Rb + Rb * Rc) * Rd) * Re + ((Ag + 2) * Rb * Rd * Rd + ((Ag + 4) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc) * Rd + 2 * ((Ag + 2) * Rb * Rb + (Ag + 2) * Rb * Rc + (Ag + 2) * Rb * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -(Rb * Rb * Rc * Rd * Re + (Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (2 * Rb * Rb * Rc + Rb * Rc * Rc + 2 * Rb * Rc * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Ri) * Ro * Ro + (((Ag + 2) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc) * Rd * Re + 2 * ((Ag + 1) * Rb * Rb + (Ag + 1) * Rb * Rc + (Ag + 1) * Rb * Rd) * Re * Re) * Ri - (2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + (2 * Rb * Rb * Rc + Rb * Rc * Rc) * Rd + (3 * Rb * Rb * Rc + Rb * Rc * Rc + (2 * Rb * Rb + 3 * Rb * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + 2 * Rb * Rb) * Rd + 2 * ((Ag + 2) * Rb * Rb + (Ag + 2) * Rb * Rc + (Ag + 2) * Rb * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -(Rb * Rb * Rc * Rd * Rd - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rc * Rd) * Ro * Ro + (Rb * Rb * Rc * Rd + Rb * Rb * Rd * Rd) * Re + (((Ag + 2) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rb * Rd * Rd + ((Ag + 1) * Rb * Rb + (Ag + 1) * Rb * Rc) * Rd) * Re) * Ri + (Rb * Rc * Rc * Rd - Rb * Rc * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd) * Re - ((Ag + 2) * Rb * Rd * Rd + ((Ag + 2) * Rb * Rb + (Ag + 2) * Rb * Rc) * Rd) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) },
                                { (Ag * Rc * Rd * Ri + Rb * Rc * Rd + Rb * Rc * Re - (Rb * Rc + Rc * Rd) * Ro) / (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro), -(Rb * Rc * Rc * Rd * Rd + (Rb * Rc * Rc + Rb * Rc * Rd) * Re * Re + (Rb * Rc * Rc + Rc * Rc * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Ri) * Ro * Ro + (2 * Rb * Rc * Rc * Rd + Rb * Rc * Rd * Rd) * Re + (((Ag + 2) * Rc * Rc + 2 * Rb * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rc * Rd) * Re * Re + ((Ag + 2) * Rc * Rd * Rd + (2 * (Ag + 2) * Rb * Rc + (3 * Ag + 4) * Rc * Rc) * Rd) * Re) * Ri - (2 * Rb * Rc * Rc * Rd + Rc * Rc * Rd * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re * Re + (2 * Rb * Rc * Rc + Rc * Rd * Rd + 3 * (Rb * Rc + Rc * Rc) * Rd) * Re + (2 * Rc * Rd * Rd + ((Ag + 4) * Rc * Rc + 4 * Rb * Rc) * Rd + 2 * ((Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rc * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -(Rb * Rc * Rc * Rd * Rd + (Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd) * Re * Re + (Rb * Rc * Rc + Rc * Rc * Rd - (Rb * Rb - Rc * Rc + 2 * Rb * Rd + Rd * Rd) * Re - (Rb * Rb - Rc * Rc + 2 * Rb * Rd + Rd * Rd) * Ri) * Ro * Ro + (2 * Rb * Rc * Rc * Rd - Rb * Rb * Rd * Rd) * Re + (((Ag + 1) * Rc * Rc - Rb * Rb) * Rd * Rd - ((Ag + 1) * Rb * Rb - (Ag + 1) * Rc * Rc + 2 * (Ag + 1) * Rb * Rd + (Ag + 1) * Rd * Rd) * Re * Re - ((Ag + 2) * Rb * Rd * Rd + ((Ag + 2) * Rb * Rb - 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - (2 * Rb * Rc * Rc * Rd + Rc * Rc * Rd * Rd - (Rb * Rb - Rc * Rc + 2 * Rb * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rc * Rc - Rb * Rd * Rd - (Rb * Rb - Rc * Rc) * Rd) * Re - (2 * Rb * Rd * Rd - ((Ag + 2) * Rc * Rc - 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb - (Ag + 2) * Rc * Rc + 2 * (Ag + 2) * Rb * Rd + (Ag + 2) * Rd * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb * Rc + 2 * Rb * Rc * Rc) * Rd * Re + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd) * Re * Re + (Rb * Rc * Rc + Rc * Rc * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Ri) * Ro * Ro + (((Ag + 2) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd * Re + 2 * ((Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rc * Rd) * Re * Re) * Ri - (Rb * Rc * Rc * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re * Re + (Rb * Rb * Rc + 3 * Rb * Rc * Rc + (3 * Rb * Rc + 2 * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc * Rc + 2 * Rb * Rc) * Rd + 2 * ((Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rc * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb * Rc + 2 * Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd) * Ro * Ro + (2 * Rb * Rc * Rd * Rd + (Rb * Rb * Rc + 2 * Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rc * Rd * Rd + ((Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - (2 * (Rb * Rc + Rc * Rc) * Rd * Rd + (2 * Rb * Rb * Rc + 3 * Rb * Rc * Rc) * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + 2 * Rc * Rd * Rd + (3 * Rb * Rc + 2 * Rc * Rc) * Rd) * Re + ((Ag + 2) * Rc * Rd * Rd + ((Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc) * Rd) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) },
                                { (Rb * Rd * Re - (Ag * Rb + Ag * Rc) * Rd * Ri + Rc * Rd * Ro) / (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro), -(Rb * Rc * Rd * Rd * Re + (Rb * Rc * Rd + Rb * Rd * Rd) * Re * Re + (2 * Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Ag * Rb * Rc + Ag * Rc * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rd * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + (3 * Ag + 2) * Rc) * Rd * Rd + (Ag * Rb * Rc + Ag * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re * Re + ((2 * Rb + 3 * Rc) * Rd * Rd + (3 * Rb * Rc + Rc * Rc) * Rd) * Re + (2 * ((Ag + 1) * Rc + Rb) * Rd * Rd + (Ag * Rb * Rc + Ag * Rc * Rc) * Rd + 2 * ((Ag + 2) * Rd * Rd + ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb + 2 * Rb * Rc) * Rd * Rd * Re + (2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rc * Rd + Rc * Rd * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro - ((Ag * Rb * Rb + Ag * Rb * Rc) * Rd * Rd - 2 * ((Ag + 1) * Rd * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re - (2 * ((Ag + 1) * Rc + Rb) * Rd * Rd - (Ag * Rb * Rb + Ag * Rb * Rc) * Rd) * Re) * Ri - (Rb * Rc * Rd * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re * Re + ((3 * Rb + 2 * Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc) * Rd) * Re - (((Ag - 2) * Rb - (Ag + 2) * Rc) * Rd * Rd + (Ag * Rb * Rb + Ag * Rb * Rc) * Rd - 2 * ((Ag + 2) * Rd * Rd + ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb + 2 * Rb * Rc) * Rd * Rd * Re + (Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd - (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rd * Rd) * Re * Re - (Rb * Rb * Rc + Rb * Rc * Rc - Rc * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc - Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc - Rd * Rd) * Ri) * Ro * Ro + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd * Re + ((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd - ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc - (Ag + 1) * Rd * Rd) * Re * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd - (Rb * Rb + 2 * Rb * Rc + Rc * Rc - Rd * Rd) * Re * Re - 2 * (Rb * Rb * Rc + Rb * Rc * Rc - (Rb + Rc) * Rd * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd - ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc - (Ag + 2) * Rd * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), (2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rc * Rd * Rd + (Rb * Rc + Rc * Rc) * Rd) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd * Rd + 2 * (((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((3 * Rb * Rc + 2 * Rc * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + ((Rb + 2 * Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + 2 * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc) * Rd) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) },
                                { (Rb * Rd * Re + (Ag * Rb + Ag * Rc + Ag * Rd) * Re * Ri - (Rb + Rc + Rd) * Re * Ro) / (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro), -(Rb * Rc * Rd * Rd * Re - (Rb * Rc + Rc * Rc + Rc * Rd) * Re * Ro * Ro + (Rb * Rc * Rd + Rb * Rd * Rd) * Re * Re - ((Ag * Rb * Rc + Ag * Rc * Rc - (Ag + 2) * Rd * Rd - ((Ag + 2) * Rb + 2 * Rc) * Rd) * Re * Re - (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd - (Ag * Rb * Rc + Ag * Rc * Rc) * Rd) * Re) * Ri + ((Rb * Rc + Rc * Rc - Rb * Rd - Rd * Rd) * Re * Re + (Ag * Rb * Rc + Ag * Rc * Rc + ((Ag - 2) * Rc - 2 * Rb) * Rd - 2 * Rd * Rd) * Re * Ri + (Rc * Rc * Rd - Rc * Rd * Rd) * Re) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb + 2 * Rb * Rc) * Rd * Rd * Re + (Rb * Rb + Rb * Rc + (2 * Rb + Rc) * Rd + Rd * Rd) * Re * Ro * Ro + (2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + ((Ag * Rb * Rb + Ag * Rb * Rc + 2 * (Ag + 1) * Rd * Rd + ((3 * Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + (Ag * Rb * Rb + Ag * Rb * Rc) * Rd) * Re) * Ri - ((Rb * Rb + Rb * Rc + (3 * Rb + 2 * Rc) * Rd + 2 * Rd * Rd) * Re * Re + (Ag * Rb * Rb + Ag * Rb * Rc + (Ag + 2) * Rd * Rd + (2 * (Ag + 1) * Rb + (Ag + 2) * Rc) * Rd) * Re * Ri + (2 * (Rb + Rc) * Rd * Rd + (2 * Rb * Rb + 3 * Rb * Rc) * Rd) * Re) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), ((Rb * Rc + Rc * Rc + Rc * Rd) * Re * Ro * Ro + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Re + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (2 * ((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Re + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc + ((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd) * Re * Re) * Ri - ((Rb * Rb + 3 * Rb * Rc + 2 * Rc * Rc + (Rb + 2 * Rc) * Rd) * Re * Re + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb + ((Ag + 2) * Rc + 2 * Rb) * Rd) * Re * Ri + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + (3 * Rb * Rc + 2 * Rc * Rc) * Rd) * Re) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd - ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd - (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) } });

            auto Ra = (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro);
            return Ra;
        }
    };

    using RType = RtypeAdaptor<float, 0, ImpedanceCalc, decltype (R197), decltype (C58), decltype (C59), decltype (R196)>;
    RType R { R197, C58, C59, R196 };

    ResistorT<float> R190 { 680.0f };
    ResistorT<float> R189 { 100000.0f };
    CapacitorT<float> C57 { 0.0068e-6f };

    // Port A
    WDFParallelT<float, decltype (R), decltype (R190)> P2 { R, R190 };
    WDFParallelT<float, decltype (C57), decltype (R189)> P1 { C57, R189 };
    WDFSeriesT<float, decltype (P2), decltype (P1)> S1 { P2, P1 };
    IdealVoltageSourceT<float, decltype (S1)> Vin { S1 };

}; // SnareResonatorLow

class SnareResonatorHigh
{
public:
    SnareResonatorHigh() = default;

    float vinDivider = 1.0f;

    void prepare (double sampleRate)
    {
        C60.prepare ((float) sampleRate);
        C61.prepare ((float) sampleRate);
    }

    void reset()
    {
        C60.reset();
        C61.reset();
    }

    float C61_range = 9.0e-9;
    void setRackParameters(float freqMod) {
        // freqMod/decayMod [-1.0, +1.0]
        C61.setCapacitanceValue(C61_value + (freqMod * -1.0) * C61_range);
    }

    void setParameters (float freqHz, float Rmult01)
    {
        constexpr auto Rfb = 1.0e6f;
        const auto Rg = 250.0f * std::pow (2500.0f / 250.0f, Rmult01);
        float C = 1.0f / (2 * M_PI * freqHz * std::sqrt (Rfb * Rg));

        setParameters (Rfb, Rg, C);
    }

    void setParameters (float Rfb, float Rg, float Cval)
    {
        R198.setResistanceValue (Rfb);
        R195.setResistanceValue (Rg);
        C60.setCapacitanceValue (Cval);
        C61.setCapacitanceValue (Cval);
    }

    inline float processSample (float x)
    {   
        x *= vinDivider;
        Vin.setVoltage (x);

        Vin.incident (R.reflected());
        R.incident (Vin.reflected());

        return voltage<float> (R195) + voltage<float> (C61);
    }

    float C61_value = 0.01141e-6f; // Revised value, Original value is 6.8n, cheated to match the freq exactly
private:
    // Port B
    ResistorT<float> R198 { 1.0e6 };

    // Port C
    CapacitorT<float> C60 { 0.0068e-6f };

    // Port D
    CapacitorT<float> C61 { C61_value };

    // Port E
    ResistorT<float> R195 { 2.2e3 };

    struct ImpedanceCalc
    {
        template <typename RType>
        static float calcImpedance (RType& R)
        {
            constexpr float Ag = 100000.0f; // op-amp gain
            constexpr float Ri = 500.0e6f; // op-amp input impedance
            constexpr float Ro = 1.0e-1f; // op-amp output impedance
            const auto [Rb, Rc, Rd, Re] = R.getPortImpedances();

            // This scattering matrix was derived using the R-Solver python script (https://github.com/jatinchowdhury18/R-Solver),
            // invoked with command: r_solver.py --adapt 0 --out scratch/snare_res_scatt.txt scratch/snare_res2.txt
            R.setSMatrixData ({ { 0, -(Rc * Rd + (Rc + Rd) * Re - Rc * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro), (Rb * Rd + Rb * Re - (Rb + Rd) * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro), (Rb * Re + Rc * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro), (Rb * Rd - (Rb + Rc + Rd) * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro) },
                                { (Ag * Rb * Rd * Ri - Rb * Rc * Rd + Rb * Rc * Ro - (Rb * Rc + Rb * Rd) * Re) / (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro), -(Rb * Rb * Rc * Rd * Rd + (Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (Rb * Rb * Rc - Rc * Rc * Rd - Rc * Rd * Rd + (Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Re + (Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Ri) * Ro * Ro + (2 * Rb * Rb * Rc * Rd + Rb * Rb * Rd * Rd) * Re - (((Ag + 1) * Rc * Rc - Rb * Rb) * Rd * Rd - ((Ag + 1) * Rb * Rb - (Ag + 1) * Rc * Rc - 2 * (Ag + 1) * Rc * Rd - (Ag + 1) * Rd * Rd) * Re * Re + (2 * (Ag + 1) * Rc * Rd * Rd - ((Ag + 2) * Rb * Rb - 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - (2 * Rb * Rb * Rc * Rd - Rc * Rc * Rd * Rd + (Rb * Rb - Rc * Rc - 2 * Rc * Rd - Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc - Rc * Rd * Rd + (Rb * Rb - Rc * Rc) * Rd) * Re - ((Ag + 2) * Rc * Rd * Rd + ((Ag + 2) * Rc * Rc - 2 * Rb * Rb) * Rd - ((Ag + 2) * Rb * Rb - (Ag + 2) * Rc * Rc - 2 * (Ag + 2) * Rc * Rd - (Ag + 2) * Rd * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -(Rb * Rb * Rc * Rd * Rd + (Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Ri) * Ro * Ro + (2 * Rb * Rb * Rc * Rd + Rb * Rb * Rd * Rd) * Re + (((Ag + 2) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rb * Rb + (Ag + 1) * Rb * Rc + (Ag + 1) * Rb * Rd) * Re * Re + (2 * (Ag + 1) * Rb * Rd * Rd + ((3 * Ag + 4) * Rb * Rb + 4 * (Ag + 1) * Rb * Rc) * Rd) * Re) * Ri - (2 * Rb * Rb * Rc * Rd + Rb * Rc * Rd * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + (2 * Rb * Rb * Rc + Rb * Rd * Rd + 3 * (Rb * Rb + Rb * Rc) * Rd) * Re + ((Ag + 2) * Rb * Rd * Rd + ((Ag + 4) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc) * Rd + 2 * ((Ag + 2) * Rb * Rb + (Ag + 2) * Rb * Rc + (Ag + 2) * Rb * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -(Rb * Rb * Rc * Rd * Re + (Rb * Rb * Rc + Rb * Rb * Rd) * Re * Re + (2 * Rb * Rb * Rc + Rb * Rc * Rc + 2 * Rb * Rc * Rd + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re + 2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Ri) * Ro * Ro + (((Ag + 2) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc) * Rd * Re + 2 * ((Ag + 1) * Rb * Rb + (Ag + 1) * Rb * Rc + (Ag + 1) * Rb * Rd) * Re * Re) * Ri - (2 * (Rb * Rb + Rb * Rc + Rb * Rd) * Re * Re + (2 * Rb * Rb * Rc + Rb * Rc * Rc) * Rd + (3 * Rb * Rb * Rc + Rb * Rc * Rc + (2 * Rb * Rb + 3 * Rb * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + 2 * Rb * Rb) * Rd + 2 * ((Ag + 2) * Rb * Rb + (Ag + 2) * Rb * Rc + (Ag + 2) * Rb * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -(Rb * Rb * Rc * Rd * Rd - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rc * Rd) * Ro * Ro + (Rb * Rb * Rc * Rd + Rb * Rb * Rd * Rd) * Re + (((Ag + 2) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rb * Rd * Rd + ((Ag + 1) * Rb * Rb + (Ag + 1) * Rb * Rc) * Rd) * Re) * Ri + (Rb * Rc * Rc * Rd - Rb * Rc * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd) * Re - ((Ag + 2) * Rb * Rd * Rd + ((Ag + 2) * Rb * Rb + (Ag + 2) * Rb * Rc) * Rd) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) },
                                { (Ag * Rc * Rd * Ri + Rb * Rc * Rd + Rb * Rc * Re - (Rb * Rc + Rc * Rd) * Ro) / (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro), -(Rb * Rc * Rc * Rd * Rd + (Rb * Rc * Rc + Rb * Rc * Rd) * Re * Re + (Rb * Rc * Rc + Rc * Rc * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Ri) * Ro * Ro + (2 * Rb * Rc * Rc * Rd + Rb * Rc * Rd * Rd) * Re + (((Ag + 2) * Rc * Rc + 2 * Rb * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rc * Rd) * Re * Re + ((Ag + 2) * Rc * Rd * Rd + (2 * (Ag + 2) * Rb * Rc + (3 * Ag + 4) * Rc * Rc) * Rd) * Re) * Ri - (2 * Rb * Rc * Rc * Rd + Rc * Rc * Rd * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re * Re + (2 * Rb * Rc * Rc + Rc * Rd * Rd + 3 * (Rb * Rc + Rc * Rc) * Rd) * Re + (2 * Rc * Rd * Rd + ((Ag + 4) * Rc * Rc + 4 * Rb * Rc) * Rd + 2 * ((Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rc * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -(Rb * Rc * Rc * Rd * Rd + (Rb * Rc * Rc - Rb * Rb * Rd - Rb * Rd * Rd) * Re * Re + (Rb * Rc * Rc + Rc * Rc * Rd - (Rb * Rb - Rc * Rc + 2 * Rb * Rd + Rd * Rd) * Re - (Rb * Rb - Rc * Rc + 2 * Rb * Rd + Rd * Rd) * Ri) * Ro * Ro + (2 * Rb * Rc * Rc * Rd - Rb * Rb * Rd * Rd) * Re + (((Ag + 1) * Rc * Rc - Rb * Rb) * Rd * Rd - ((Ag + 1) * Rb * Rb - (Ag + 1) * Rc * Rc + 2 * (Ag + 1) * Rb * Rd + (Ag + 1) * Rd * Rd) * Re * Re - ((Ag + 2) * Rb * Rd * Rd + ((Ag + 2) * Rb * Rb - 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - (2 * Rb * Rc * Rc * Rd + Rc * Rc * Rd * Rd - (Rb * Rb - Rc * Rc + 2 * Rb * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rc * Rc - Rb * Rd * Rd - (Rb * Rb - Rc * Rc) * Rd) * Re - (2 * Rb * Rd * Rd - ((Ag + 2) * Rc * Rc - 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb - (Ag + 2) * Rc * Rc + 2 * (Ag + 2) * Rb * Rd + (Ag + 2) * Rd * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb * Rc + 2 * Rb * Rc * Rc) * Rd * Re + (Rb * Rb * Rc + 2 * Rb * Rc * Rc + 2 * Rb * Rc * Rd) * Re * Re + (Rb * Rc * Rc + Rc * Rc * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Ri) * Ro * Ro + (((Ag + 2) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd * Re + 2 * ((Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rc * Rd) * Re * Re) * Ri - (Rb * Rc * Rc * Rd + 2 * (Rb * Rc + Rc * Rc + Rc * Rd) * Re * Re + (Rb * Rb * Rc + 3 * Rb * Rc * Rc + (3 * Rb * Rc + 2 * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc * Rc + 2 * Rb * Rc) * Rd + 2 * ((Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rc * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb * Rc + 2 * Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd) * Ro * Ro + (2 * Rb * Rc * Rd * Rd + (Rb * Rb * Rc + 2 * Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rc * Rd * Rd + ((Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - (2 * (Rb * Rc + Rc * Rc) * Rd * Rd + (2 * Rb * Rb * Rc + 3 * Rb * Rc * Rc) * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + 2 * Rc * Rd * Rd + (3 * Rb * Rc + 2 * Rc * Rc) * Rd) * Re + ((Ag + 2) * Rc * Rd * Rd + ((Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc) * Rd) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) },
                                { (Rb * Rd * Re - (Ag * Rb + Ag * Rc) * Rd * Ri + Rc * Rd * Ro) / (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro), -(Rb * Rc * Rd * Rd * Re + (Rb * Rc * Rd + Rb * Rd * Rd) * Re * Re + (2 * Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Ag * Rb * Rc + Ag * Rc * Rc) * Rd * Rd + 2 * ((Ag + 1) * Rd * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + (3 * Ag + 2) * Rc) * Rd * Rd + (Ag * Rb * Rc + Ag * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re * Re + ((2 * Rb + 3 * Rc) * Rd * Rd + (3 * Rb * Rc + Rc * Rc) * Rd) * Re + (2 * ((Ag + 1) * Rc + Rb) * Rd * Rd + (Ag * Rb * Rc + Ag * Rc * Rc) * Rd + 2 * ((Ag + 2) * Rd * Rd + ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb + 2 * Rb * Rc) * Rd * Rd * Re + (2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rc * Rd + Rc * Rd * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro - ((Ag * Rb * Rb + Ag * Rb * Rc) * Rd * Rd - 2 * ((Ag + 1) * Rd * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re - (2 * ((Ag + 1) * Rc + Rb) * Rd * Rd - (Ag * Rb * Rb + Ag * Rb * Rc) * Rd) * Re) * Ri - (Rb * Rc * Rd * Rd + 2 * ((Rb + Rc) * Rd + Rd * Rd) * Re * Re + ((3 * Rb + 2 * Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc) * Rd) * Re - (((Ag - 2) * Rb - (Ag + 2) * Rc) * Rd * Rd + (Ag * Rb * Rb + Ag * Rb * Rc) * Rd - 2 * ((Ag + 2) * Rd * Rd + ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb + 2 * Rb * Rc) * Rd * Rd * Re + (Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd - (Rb * Rb * Rc + Rb * Rc * Rc - Rb * Rd * Rd) * Re * Re - (Rb * Rb * Rc + Rb * Rc * Rc - Rc * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc - Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc - Rd * Rd) * Ri) * Ro * Ro + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd * Re + ((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd - ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc - (Ag + 1) * Rd * Rd) * Re * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd - (Rb * Rb + 2 * Rb * Rc + Rc * Rc - Rd * Rd) * Re * Re - 2 * (Rb * Rb * Rc + Rb * Rc * Rc - (Rb + Rc) * Rd * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd - ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc - (Ag + 2) * Rd * Rd) * Re) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), (2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rc * Rd * Rd + (Rb * Rc + Rc * Rc) * Rd) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd * Rd + 2 * (((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((3 * Rb * Rc + 2 * Rc * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + ((Rb + 2 * Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + 2 * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc) * Rd) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) },
                                { (Rb * Rd * Re + (Ag * Rb + Ag * Rc + Ag * Rd) * Re * Ri - (Rb + Rc + Rd) * Re * Ro) / (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro), -(Rb * Rc * Rd * Rd * Re - (Rb * Rc + Rc * Rc + Rc * Rd) * Re * Ro * Ro + (Rb * Rc * Rd + Rb * Rd * Rd) * Re * Re - ((Ag * Rb * Rc + Ag * Rc * Rc - (Ag + 2) * Rd * Rd - ((Ag + 2) * Rb + 2 * Rc) * Rd) * Re * Re - (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd - (Ag * Rb * Rc + Ag * Rc * Rc) * Rd) * Re) * Ri + ((Rb * Rc + Rc * Rc - Rb * Rd - Rd * Rd) * Re * Re + (Ag * Rb * Rc + Ag * Rc * Rc + ((Ag - 2) * Rc - 2 * Rb) * Rd - 2 * Rd * Rd) * Re * Ri + (Rc * Rc * Rd - Rc * Rd * Rd) * Re) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), -((Rb * Rb + 2 * Rb * Rc) * Rd * Rd * Re + (Rb * Rb + Rb * Rc + (2 * Rb + Rc) * Rd + Rd * Rd) * Re * Ro * Ro + (2 * Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + ((Ag * Rb * Rb + Ag * Rb * Rc + 2 * (Ag + 1) * Rd * Rd + ((3 * Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + (Ag * Rb * Rb + Ag * Rb * Rc) * Rd) * Re) * Ri - ((Rb * Rb + Rb * Rc + (3 * Rb + 2 * Rc) * Rd + 2 * Rd * Rd) * Re * Re + (Ag * Rb * Rb + Ag * Rb * Rc + (Ag + 2) * Rd * Rd + (2 * (Ag + 1) * Rb + (Ag + 2) * Rc) * Rd) * Re * Ri + (2 * (Rb + Rc) * Rd * Rd + (2 * Rb * Rb + 3 * Rb * Rc) * Rd) * Re) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), ((Rb * Rc + Rc * Rc + Rc * Rd) * Re * Ro * Ro + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Re + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (2 * ((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Re + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc + ((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd) * Re * Re) * Ri - ((Rb * Rb + 3 * Rb * Rc + 2 * Rc * Rc + (Rb + 2 * Rc) * Rd) * Re * Re + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb + ((Ag + 2) * Rc + 2 * Rb) * Rd) * Re * Ri + (2 * Rb * Rb * Rc + 2 * Rb * Rc * Rc + (3 * Rb * Rc + 2 * Rc * Rc) * Rd) * Re) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro), ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd - (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd - ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd - (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd) * Ri) * Ro) / ((Rb * Rb * Rc + Rb * Rc * Rc) * Rd * Rd + (Rb * Rb * Rc + Rb * Rc * Rc + Rb * Rd * Rd + (Rb * Rb + 2 * Rb * Rc) * Rd) * Re * Re + (Rb * Rb * Rc + Rb * Rc * Rc + Rc * Rd * Rd + (2 * Rb * Rc + Rc * Rc) * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Ri) * Ro * Ro + ((Rb * Rb + 2 * Rb * Rc) * Rd * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd) * Re + (((Ag + 2) * Rb * Rc + (Ag + 1) * Rc * Rc + Rb * Rb) * Rd * Rd + ((Ag + 1) * Rb * Rb + 2 * (Ag + 1) * Rb * Rc + (Ag + 1) * Rc * Rc + (Ag + 1) * Rd * Rd + 2 * ((Ag + 1) * Rb + (Ag + 1) * Rc) * Rd) * Re * Re + (((Ag + 2) * Rb + 2 * (Ag + 1) * Rc) * Rd * Rd + ((Ag + 2) * Rb * Rb + (3 * Ag + 4) * Rb * Rc + 2 * (Ag + 1) * Rc * Rc) * Rd) * Re) * Ri - ((2 * Rb * Rc + Rc * Rc) * Rd * Rd + (Rb * Rb + 2 * Rb * Rc + Rc * Rc + 2 * (Rb + Rc) * Rd + Rd * Rd) * Re * Re + 2 * (Rb * Rb * Rc + Rb * Rc * Rc) * Rd + 2 * (Rb * Rb * Rc + Rb * Rc * Rc + (Rb + Rc) * Rd * Rd + (Rb * Rb + 3 * Rb * Rc + Rc * Rc) * Rd) * Re + (((Ag + 2) * Rc + 2 * Rb) * Rd * Rd + ((Ag + 4) * Rb * Rc + (Ag + 2) * Rc * Rc + 2 * Rb * Rb) * Rd + ((Ag + 2) * Rb * Rb + 2 * (Ag + 2) * Rb * Rc + (Ag + 2) * Rc * Rc + (Ag + 2) * Rd * Rd + 2 * ((Ag + 2) * Rb + (Ag + 2) * Rc) * Rd) * Re) * Ri) * Ro) } });

            auto Ra = (Rb * Rc * Rd + (Rb * Rc + Rb * Rd) * Re + (((Ag + 1) * Rc + Rb) * Rd + ((Ag + 1) * Rb + (Ag + 1) * Rc + (Ag + 1) * Rd) * Re) * Ri - (Rb * Rc + Rc * Rd + (Rb + Rc + Rd) * Re + (Rb + Rc + Rd) * Ri) * Ro) / ((Rb + Rc) * Rd + (Rb + Rc + Rd) * Re - (Rb + Rc + Rd) * Ro);
            return Ra;
        }
    };

    using RType = RtypeAdaptor<float, 0, ImpedanceCalc, decltype (R198), decltype (C60), decltype (C61), decltype (R195)>;
    RType R { R198, C60, C61, R195 };

    // Port A
    IdealVoltageSourceT<float, decltype (R)> Vin { R };
}; // SnareResonatorHigh

